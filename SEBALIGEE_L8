# Import Libaries and Geometry
import ee, geemap, datetime, calendar, math

# Intialize GEE and create Interactive Map 
Map = geemap.Map(center=(11.43, 37.12), zoom=11)

# Import Geometry
Jedeb = ee.FeatureCollection("projects/ee-yilkalgebeyehu/assets/Jedeb_Catchment")

# Set month and year number
m = 12
year = 2022

# Set date for satellite images
start = datetime.datetime(year, m, 1)
end = datetime.datetime(year, m, calendar.monthrange(year, m)[1])
LC_year_1 = datetime.datetime(year, 1, 1)
LC_year_2 = datetime.datetime(year, 12, 31)

# Constants
# Specific heat at constant pressure of air, kJ/kg K
c_p = 1.013
# Ratio molecular weight of water vapor/dry air
epsilon = 0.622
# Solar constant, kJ/m^2/h
a_s = 0.355
b_s = 0.68
I_s = 4921
# Albedo constant
a_e = 0.56
b_e = 0.08
a_l = 0.2
c2 = 90
# Conversion between Kelvin and Celsius
c3 = 273
# Stefan-Boltzmann constant, kJ/(m^2 K^4 d)
sigma = 0.0000049
coef = 0.33
# Other constants
cali = 0.2
LUE_max = 2.5
Kt = 23
Th = 35
Tl = 0
# Von karman constant
von = 0.41
# Albedo for Et0; refer to https://www.fao.org/3/x0490e/x0490e07.htm
Albedo = 0.25

# Import Climate Data (ERA5 Monthly Aggregate)
climatic = ee.ImageCollection("ECMWF/ERA5_LAND/MONTHLY_AGGR").filter(ee.Filter.date(start, end))

climaticbands = climatic.toBands()

if m < 10:
    system = str(year) + "0" + str(m)
else:
    system = str(year) + str(m)

# Reduce Region
dict_T = climaticbands.select(system + "_" + "temperature_2m").reduceRegion(**{
        "reducer": ee.Reducer.mean(),
        "geometry": Jedeb.geometry(),
        "scale": 10000,
        "maxPixels": 1e9,
    }
)
# The result is a Dictionary.  Print it.
# print(dict_T.getInfo())

# Change the Temperature to celcius.
T_1 = dict_T.get(system + "_" + "temperature_2m")
T = ee.Number(T_1).subtract(c3)
# print(T.getInfo(), 'mean Temperature in C')
# print(T_1.getInfo(), 'mean Temperature in K')

# Reduce the region dewpoint temperature (Td)
dict_Td = climaticbands.select(system + "_" + "dewpoint_temperature_2m").reduceRegion(**{
        "reducer": ee.Reducer.mean(),
        "geometry": Jedeb.geometry(),
        "scale": 10000,
        "maxPixels": 1e9,
    }
)
# The result is a Dictionary.  Print it.
# print(dict_Td.getInfo())
Td = dict_Td.get(system + "_" + "dewpoint_temperature_2m")

# Calculating RH from dewpoint temperature
RH_1 = ee.Number(100).subtract(ee.Number(5).multiply(ee.Number(T_1).subtract(ee.Number(Td))))  
RH = RH_1.divide(ee.Number(100))
# print(RH_1.getInfo(), 'Mean Relative Humidity in %')

# Reduce the region Wind_speed (Both eastward and northward )
dict_Wu = climaticbands.select(system + "_" + "u_component_of_wind_10m").reduceRegion(**{
        "reducer": ee.Reducer.mean(),
        "geometry": Jedeb.geometry(),
        "scale": 10000,
        "maxPixels": 1e9,
    }
)

# The result is a Dictionary.  Print it.
Wu = dict_Wu.get(system + "_" + "u_component_of_wind_10m")

# Reduce the region Wind_speed (Both eastward and northward )
dict_Wv = climaticbands.select(system + "_" + "v_component_of_wind_10m").reduceRegion(**{
        "reducer": ee.Reducer.mean(),
        "geometry": Jedeb.geometry(),
        "scale": 10000,
        "maxPixels": 1e9,
    }
)

# The result is a Dictionary.  Print it.
Wv = dict_Wv.get(system + "_" + "v_component_of_wind_10m")

Wind_speed = ee.Number(Wu).multiply(ee.Number(Wu)).add(ee.Number(Wv).multiply(ee.Number(Wv))).sqrt()

# print(Wind_speed.getInfo(), 'mean Wind Speed in m/s')
)
